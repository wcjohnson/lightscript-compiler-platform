// Configurable lsc plugin tool
import { Toolchain } from '../Tool'
import type { ToolSource, ConfigurationOptions } from '../Types'

type ToolchainVersion = {
  name: string,
  babel: ToolSource,
  lscPlugin: ?ToolSource,
  lscPreset: ?ToolSource
};

export class LscToolchain extends Toolchain:
  // List of available toolchain versions
  versions: [ToolchainVersion] = []
  optionsMetadata: ConfigurationOptions = {}

  versionsToOptions() -> {
    description: "Compiler version"
    valueType: "options"
    options: [...for elem v in this.versions: [v.name]]
  }

  getMetadata() -/> {
    name: 'LightScript Toolchain'
    hasChildren: true
    possibleOptions: this.optionsMetadata
  }

  describe(includeMetadata: boolean = false) -/>
    desc <- super.describe(includeMetadata)
    desc.options.version = this.specifiedVersion
    desc

  setOptions(opts = {}) -/>
    this.specifiedVersion = opts.version
    version = if not opts.version:
      // Latest version
      this.versions[this.versions.length - 1]
    else:
      this.versions.find(x -> x.version == opts.version)
    if not version: throw new Error("invalid compiler version")

    super.setOptions({
      children: [
        { source: version.babel, options: opts.children?[0]?.options }
        {
          source: if opts.usePreset: version.lscPreset else: version.lscPlugin
          options: opts.children?[1]?.options
        }
      ]
    })

// Dependency injection from external module
export lscToolchains({versions}) ->
  return class RealLscToolchain extends LscToolchain:
    versions = versions
    optionsMetadata = {
      version: this.versionsToOptions()
      children: {
        valueType: "array(tool)"
        mutable: false
      }
    }

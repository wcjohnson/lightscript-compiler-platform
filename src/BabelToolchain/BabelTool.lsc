import { BabelCompileActionType } from './BabelCompiler'
import { Tool } from '../Tool'
import SystemJS from '../system.src.js'

export class BabelTool extends Tool:
  displayName = ''
  // babel tool module
  mod = null
  // Plugin opts
  jsonOpts = '{}'
  opts = {}
  // Plugin npm name
  npmPackage = null
  // Plugin version
  npmVersion = null
  // url of a SystemJS module
  url = null

  getMetadata() -/> {
    name: this.displayName
    types: {
      input: BabelCompileActionType
      output: BabelCompileActionType
    }
    hasChildren: false
    possibleOptions: {
      url: {
        description: "Import package from URL using SystemJS. Takes priority over `package` option."
        valueType: "string"
        defaultValue: ''
      }
      package: {
        description: "Exact name of npm package"
        valueType: "string"
        defaultValue: ''
      }
      version: {
        description: "Exact version of npm package (no semver aliases allowed)"
        valueType: "string"
        defaultValue: ''
      }
      options: {
        description: "Babel plugin options (JSON)"
        valueType: "json"
        defaultValue: '{}'
      }
    }
    ui: {
      // Don't live-update plugin options as user types here.
      // We don't want to trigger a bunch of invalid module load requests
      // while the user is typing in the plugin name.
      noLiveUpdates: true
    }
  }

  describe(includeMetadata: boolean = false) -/>
    v = if includeMetadata: <- this.getMetadata()
    {
      source: this.source
      ...if includeMetadata: { _metadata: v }
      options: {
        package: this.npmPackage
        version: this.npmVersion
        options: this.jsonOpts
        url: this.url
      }
    }

  setOptions(opts = {}) -/>
    this.npmPackage = opts.package
    this.npmVersion = opts.version
    this.jsonOpts = opts.options
    this.url = opts.url
    this.opts = JSON.parse(this.jsonOpts or '{}')
    this.mod = null

    // Determine target module URL
    let url = this.url
    if not url and this.npmPackage:
      now url = `https://bundle.run/${this.npmPackage}@${this.npmVersion}`
        SystemJS.config({
          meta: {
            [url]: { format: 'global' }
          }
        })


    if url:
      try:
        console.log("Loading module at", url)
        imported <- SystemJS.import(url)
        console.log("Loaded module at", url)
        this.mod = if imported.default: imported.default else: imported
      catch err:
        err.message = `Package at ${url} could not be loaded: ` + err.message
        throw err

  dispose(): void ->
    this.mod = null

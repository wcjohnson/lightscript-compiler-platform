// Configurable lsc plugin tool
import { BabelCompileAction, BabelCompileActionType } from './BabelCompiler'
import { Tool } from '../Tool'
import type { ToolMetadata } from '../Types'

export class LscBabelPluginTool extends Tool:
  // Lsc babel plugin
  lscPlugin = null
  // Lsc semver
  lscVersion = "unknown"
  // Lsc compiler options metadata
  optionsMetadata = {}
  // Lsc config options
  lscOptions = {}

  getMetadata(): ToolMetadata -/> {
    name: `LightScript Compiler Plugin: v${this.lscVersion}`
    types: {
      input: BabelCompileActionType
      output: BabelCompileActionType
    }
    hasChildren: false
    possibleOptions: this.optionsMetadata
  }

  describe(includeMetadata: boolean = false) -/>
    v = if includeMetadata: <- this.getMetadata()
    {
      source: this.source
      ...if includeMetadata: { _metadata: v }
      options: this.lscOptions
    }

  setOptions(opts) -/>
    this.lscOptions = opts or {}

  apply(inputAction: BabelCompileAction) -/>
    inputAction.addPlugin(this.lscPlugin, this.lscOptions)
    inputAction

  dispose(): void ->
    // Drop ref to lsc compiler
    this.lscPlugin = null

// Dependency injection from external module
export wrapLscPlugin({plugin, version, options}) ->
  return class RealLscPluginTool extends LscBabelPluginTool:
    lscPlugin = plugin
    lscVersion = version
    optionsMetadata = options

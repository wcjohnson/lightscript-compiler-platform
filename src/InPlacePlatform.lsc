import { Platform } from './Platform'
import { Toolchain } from './Tool'
import toolAPI from './ToolAPI'
import SystemJS from './system.src.js'
import { AnyBabelPluginTool } from './BabelToolchain/AnyBabelPlugin'
import { AnyBabelPresetTool } from './BabelToolchain/AnyBabelPreset'
import { IndirectTool } from './IndirectTool'

toolClassMappers = {
  toolchain: -> Promise.resolve(Toolchain)
  babelPlugin: -> Promise.resolve(AnyBabelPluginTool)
  babelPreset: -> Promise.resolve(AnyBabelPresetTool)
  indirect: -> Promise.resolve(IndirectTool)
  remote: (opts) -/>
    url = opts.url
    format = opts.format or 'cjs'
    SystemJS.config({
      meta: {
        [url]: { format }
      }
    })
    mod <- SystemJS.import(url)
    mod.getToolImplementation(toolAPI)
}

// Platform that loads modules into the JS runtime where the platform
// resides. Suitable for use in worker, browser, or node.
export class InPlacePlatform extends Platform:
  createTool(spec) -/>
    clazz <- toolClassMappers[spec.source.type](spec.source)
    tool = new clazz(this, spec.source)
    <- tool.setOptions(spec.options)
    tool

import { Platform } from './Platform'

import type { ToolData, ToolMetadata, ActionType } from './Types'

export NullActionType: ActionType = {
  name: 'NullAction'
}

// An Action is something that can be run on an input producing an output.
// The Action is asynchronous and may refer to a process taking place in
// another worker or thread.
export class Action:
  constructor(platform: Platform) ->
    this.platform = platform

  // Get the type of the action.
  getType(): ActionType -> NullActionType

  // Execute the action. `input` must be a json-compatible value appropriate
  // to the type of action. Returns a json-compatible result or throws.
  // eslint-disable-next-line no-unused-vars
  run(input) -/>
    return null

  // Dispose the action, freeing all resources associated with it
  dispose(): void -> return

// A Tool is something that takes an Action and modifies it, giving another
// Action.
export class Tool:
  constructor(platform: Platform, source) ->
    this.platform = platform
    this.source = source

  parent = null

  // Get metadata for this tool.
  getMetadata(): ToolMetadata -/> {
    name: 'Tool'
    types: {
      input: NullActionType
      output: NullActionType
    }
    hasChildren: false
    possibleOptions: {}
  }

  // Get JSON description of this tool
  describe(includeMetadata: boolean = false) -/>
    v = if includeMetadata: <- this.getMetadata()
    {
      source: this.source
      ...if includeMetadata: { _metadata: v }
    }

  // Set this tool's options
  setOptions(opts) -/> return

  // Called to produce the Action for this tool given an input action.
  // eslint-disable-next-line no-unused-vars
  apply(inputAction: Action) -/> null

  // Called to destroy the tool
  dispose(): void -> return

// A Toolchain encapsulates a series of child tools
export class Toolchain extends Tool:
  // Child tools
  children = []

  getMetadata() -/> {
    name: 'Toolchain'
    hasChildren: true
    possibleOptions: {
      children: {
        valueType: "array(tool)"
        mutable: true
      }
    }
  }

  describe(includeMetadata: boolean = false) -/>
    v = if includeMetadata: <- this.getMetadata()
    children <- [...for elem child in this.children:
      [child.describe(includeMetadata)]
    ]
    {
      source: this.source
      ...if includeMetadata: { _metadata: v }
      options: { children }
    }

  setOptions(opts) -/>
    if not Array.isArray(opts?.children):
      throw new Error("invalid toolchain children")

    // Dispose current tools
    for elem child in this.children: child.dispose()

    // Conjure new tools in parallel
    this.children = <- [...for elem spec in opts.children:
      [this.platform.createTool(spec)]
    ]

    return

  apply(inputAction: Action) -/>
    let currentAction = inputAction
    for elem child in this.children:
      now currentAction <- child.apply(currentAction)
    currentAction

import { InPlacePlatform } from '../..'

test! "load remote compiler platform", -/>
  p = new InPlacePlatform()
  t <- p.createTool({
    source: {
      type: 'remote'
      url: 'https://wcjohnson.github.io/lightscript-compiler/modules/platform/babel-7.1.0.min.js'
    }
  })
  description <- t.describe(true)
  act <- t.apply(null)

  rst <- act.run({
    code: `
      class C {}
    `
  })
  expect({ description, code: rst.code}).toMatchSnapshot()

test! "load toolchain", -/>
  p = new InPlacePlatform()
  t <- p.createTool({
    source: { type: 'toolchain' }
    options: {
      children: [
        // babel
        {
          source: {
            type: 'remote'
            url: 'https://wcjohnson.github.io/lightscript-compiler/modules/platform/babel-7.1.0.min.js'
          }
        }
        // lsc plugin
        {
          source: {
            type: 'remote'
            url: 'https://wcjohnson.github.io/lightscript-compiler/modules/compiler/4.0.0-alpha.12.min.js'
          }
        }
      ]
    }
  })
  description <- t.describe(true)
  act <- t.apply(null)
  rst <- act.run({
    code: `
      f() -> 1
    `
  })
  expect({ description, code: rst.code}).toMatchSnapshot()

test! "unified toolchain", -/>
  p = new InPlacePlatform()
  t <- p.createTool({
    source: {
      type: 'remote'
      url: 'https://wcjohnson.github.io/lightscript-compiler/modules/registry.js'
    }
  })
  description <- t.describe(true)
  act <- t.apply(null)
  rst <- act.run({
    code: `
      f() -> 1
    `
  })
  expect({ description, code: rst.code}).toMatchSnapshot()
